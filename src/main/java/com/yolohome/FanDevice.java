/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.yolohome;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema for fan device */
@org.apache.avro.specific.AvroGenerated
public class FanDevice extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5714076574272021471L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FanDevice\",\"namespace\":\"com.yolohome\",\"doc\":\"Schema for fan device\",\"fields\":[{\"name\":\"id_fan\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"bbc_fan\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"bbc_control_fan\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"bbc_name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"bbc_password\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"timestamp\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FanDevice> ENCODER =
      new BinaryMessageEncoder<FanDevice>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FanDevice> DECODER =
      new BinaryMessageDecoder<FanDevice>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FanDevice> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FanDevice> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FanDevice> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FanDevice>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FanDevice to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FanDevice from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FanDevice instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FanDevice fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id_fan;
  private java.lang.CharSequence bbc_fan;
  private java.lang.CharSequence bbc_control_fan;
  private java.lang.CharSequence bbc_name;
  private java.lang.CharSequence bbc_password;
  private java.lang.CharSequence timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FanDevice() {}

  /**
   * All-args constructor.
   * @param id_fan The new value for id_fan
   * @param bbc_fan The new value for bbc_fan
   * @param bbc_control_fan The new value for bbc_control_fan
   * @param bbc_name The new value for bbc_name
   * @param bbc_password The new value for bbc_password
   * @param timestamp The new value for timestamp
   */
  public FanDevice(java.lang.CharSequence id_fan, java.lang.CharSequence bbc_fan, java.lang.CharSequence bbc_control_fan, java.lang.CharSequence bbc_name, java.lang.CharSequence bbc_password, java.lang.CharSequence timestamp) {
    this.id_fan = id_fan;
    this.bbc_fan = bbc_fan;
    this.bbc_control_fan = bbc_control_fan;
    this.bbc_name = bbc_name;
    this.bbc_password = bbc_password;
    this.timestamp = timestamp;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id_fan;
    case 1: return bbc_fan;
    case 2: return bbc_control_fan;
    case 3: return bbc_name;
    case 4: return bbc_password;
    case 5: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id_fan = (java.lang.CharSequence)value$; break;
    case 1: bbc_fan = (java.lang.CharSequence)value$; break;
    case 2: bbc_control_fan = (java.lang.CharSequence)value$; break;
    case 3: bbc_name = (java.lang.CharSequence)value$; break;
    case 4: bbc_password = (java.lang.CharSequence)value$; break;
    case 5: timestamp = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id_fan' field.
   * @return The value of the 'id_fan' field.
   */
  public java.lang.CharSequence getIdFan() {
    return id_fan;
  }


  /**
   * Sets the value of the 'id_fan' field.
   * @param value the value to set.
   */
  public void setIdFan(java.lang.CharSequence value) {
    this.id_fan = value;
  }

  /**
   * Gets the value of the 'bbc_fan' field.
   * @return The value of the 'bbc_fan' field.
   */
  public java.lang.CharSequence getBbcFan() {
    return bbc_fan;
  }


  /**
   * Sets the value of the 'bbc_fan' field.
   * @param value the value to set.
   */
  public void setBbcFan(java.lang.CharSequence value) {
    this.bbc_fan = value;
  }

  /**
   * Gets the value of the 'bbc_control_fan' field.
   * @return The value of the 'bbc_control_fan' field.
   */
  public java.lang.CharSequence getBbcControlFan() {
    return bbc_control_fan;
  }


  /**
   * Sets the value of the 'bbc_control_fan' field.
   * @param value the value to set.
   */
  public void setBbcControlFan(java.lang.CharSequence value) {
    this.bbc_control_fan = value;
  }

  /**
   * Gets the value of the 'bbc_name' field.
   * @return The value of the 'bbc_name' field.
   */
  public java.lang.CharSequence getBbcName() {
    return bbc_name;
  }


  /**
   * Sets the value of the 'bbc_name' field.
   * @param value the value to set.
   */
  public void setBbcName(java.lang.CharSequence value) {
    this.bbc_name = value;
  }

  /**
   * Gets the value of the 'bbc_password' field.
   * @return The value of the 'bbc_password' field.
   */
  public java.lang.CharSequence getBbcPassword() {
    return bbc_password;
  }


  /**
   * Sets the value of the 'bbc_password' field.
   * @param value the value to set.
   */
  public void setBbcPassword(java.lang.CharSequence value) {
    this.bbc_password = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Creates a new FanDevice RecordBuilder.
   * @return A new FanDevice RecordBuilder
   */
  public static com.yolohome.FanDevice.Builder newBuilder() {
    return new com.yolohome.FanDevice.Builder();
  }

  /**
   * Creates a new FanDevice RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FanDevice RecordBuilder
   */
  public static com.yolohome.FanDevice.Builder newBuilder(com.yolohome.FanDevice.Builder other) {
    if (other == null) {
      return new com.yolohome.FanDevice.Builder();
    } else {
      return new com.yolohome.FanDevice.Builder(other);
    }
  }

  /**
   * Creates a new FanDevice RecordBuilder by copying an existing FanDevice instance.
   * @param other The existing instance to copy.
   * @return A new FanDevice RecordBuilder
   */
  public static com.yolohome.FanDevice.Builder newBuilder(com.yolohome.FanDevice other) {
    if (other == null) {
      return new com.yolohome.FanDevice.Builder();
    } else {
      return new com.yolohome.FanDevice.Builder(other);
    }
  }

  /**
   * RecordBuilder for FanDevice instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FanDevice>
    implements org.apache.avro.data.RecordBuilder<FanDevice> {

    private java.lang.CharSequence id_fan;
    private java.lang.CharSequence bbc_fan;
    private java.lang.CharSequence bbc_control_fan;
    private java.lang.CharSequence bbc_name;
    private java.lang.CharSequence bbc_password;
    private java.lang.CharSequence timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.yolohome.FanDevice.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id_fan)) {
        this.id_fan = data().deepCopy(fields()[0].schema(), other.id_fan);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.bbc_fan)) {
        this.bbc_fan = data().deepCopy(fields()[1].schema(), other.bbc_fan);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.bbc_control_fan)) {
        this.bbc_control_fan = data().deepCopy(fields()[2].schema(), other.bbc_control_fan);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.bbc_name)) {
        this.bbc_name = data().deepCopy(fields()[3].schema(), other.bbc_name);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.bbc_password)) {
        this.bbc_password = data().deepCopy(fields()[4].schema(), other.bbc_password);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing FanDevice instance
     * @param other The existing instance to copy.
     */
    private Builder(com.yolohome.FanDevice other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id_fan)) {
        this.id_fan = data().deepCopy(fields()[0].schema(), other.id_fan);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bbc_fan)) {
        this.bbc_fan = data().deepCopy(fields()[1].schema(), other.bbc_fan);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bbc_control_fan)) {
        this.bbc_control_fan = data().deepCopy(fields()[2].schema(), other.bbc_control_fan);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.bbc_name)) {
        this.bbc_name = data().deepCopy(fields()[3].schema(), other.bbc_name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.bbc_password)) {
        this.bbc_password = data().deepCopy(fields()[4].schema(), other.bbc_password);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id_fan' field.
      * @return The value.
      */
    public java.lang.CharSequence getIdFan() {
      return id_fan;
    }


    /**
      * Sets the value of the 'id_fan' field.
      * @param value The value of 'id_fan'.
      * @return This builder.
      */
    public com.yolohome.FanDevice.Builder setIdFan(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id_fan = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id_fan' field has been set.
      * @return True if the 'id_fan' field has been set, false otherwise.
      */
    public boolean hasIdFan() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id_fan' field.
      * @return This builder.
      */
    public com.yolohome.FanDevice.Builder clearIdFan() {
      id_fan = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bbc_fan' field.
      * @return The value.
      */
    public java.lang.CharSequence getBbcFan() {
      return bbc_fan;
    }


    /**
      * Sets the value of the 'bbc_fan' field.
      * @param value The value of 'bbc_fan'.
      * @return This builder.
      */
    public com.yolohome.FanDevice.Builder setBbcFan(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.bbc_fan = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bbc_fan' field has been set.
      * @return True if the 'bbc_fan' field has been set, false otherwise.
      */
    public boolean hasBbcFan() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bbc_fan' field.
      * @return This builder.
      */
    public com.yolohome.FanDevice.Builder clearBbcFan() {
      bbc_fan = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bbc_control_fan' field.
      * @return The value.
      */
    public java.lang.CharSequence getBbcControlFan() {
      return bbc_control_fan;
    }


    /**
      * Sets the value of the 'bbc_control_fan' field.
      * @param value The value of 'bbc_control_fan'.
      * @return This builder.
      */
    public com.yolohome.FanDevice.Builder setBbcControlFan(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.bbc_control_fan = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bbc_control_fan' field has been set.
      * @return True if the 'bbc_control_fan' field has been set, false otherwise.
      */
    public boolean hasBbcControlFan() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bbc_control_fan' field.
      * @return This builder.
      */
    public com.yolohome.FanDevice.Builder clearBbcControlFan() {
      bbc_control_fan = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'bbc_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getBbcName() {
      return bbc_name;
    }


    /**
      * Sets the value of the 'bbc_name' field.
      * @param value The value of 'bbc_name'.
      * @return This builder.
      */
    public com.yolohome.FanDevice.Builder setBbcName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.bbc_name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'bbc_name' field has been set.
      * @return True if the 'bbc_name' field has been set, false otherwise.
      */
    public boolean hasBbcName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'bbc_name' field.
      * @return This builder.
      */
    public com.yolohome.FanDevice.Builder clearBbcName() {
      bbc_name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'bbc_password' field.
      * @return The value.
      */
    public java.lang.CharSequence getBbcPassword() {
      return bbc_password;
    }


    /**
      * Sets the value of the 'bbc_password' field.
      * @param value The value of 'bbc_password'.
      * @return This builder.
      */
    public com.yolohome.FanDevice.Builder setBbcPassword(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.bbc_password = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'bbc_password' field has been set.
      * @return True if the 'bbc_password' field has been set, false otherwise.
      */
    public boolean hasBbcPassword() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'bbc_password' field.
      * @return This builder.
      */
    public com.yolohome.FanDevice.Builder clearBbcPassword() {
      bbc_password = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.yolohome.FanDevice.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.timestamp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.yolohome.FanDevice.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FanDevice build() {
      try {
        FanDevice record = new FanDevice();
        record.id_fan = fieldSetFlags()[0] ? this.id_fan : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.bbc_fan = fieldSetFlags()[1] ? this.bbc_fan : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.bbc_control_fan = fieldSetFlags()[2] ? this.bbc_control_fan : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.bbc_name = fieldSetFlags()[3] ? this.bbc_name : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.bbc_password = fieldSetFlags()[4] ? this.bbc_password : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.timestamp = fieldSetFlags()[5] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FanDevice>
    WRITER$ = (org.apache.avro.io.DatumWriter<FanDevice>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FanDevice>
    READER$ = (org.apache.avro.io.DatumReader<FanDevice>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id_fan == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id_fan);
    }

    if (this.bbc_fan == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.bbc_fan);
    }

    if (this.bbc_control_fan == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.bbc_control_fan);
    }

    if (this.bbc_name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.bbc_name);
    }

    if (this.bbc_password == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.bbc_password);
    }

    if (this.timestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.timestamp);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id_fan = null;
      } else {
        this.id_fan = in.readString(this.id_fan instanceof Utf8 ? (Utf8)this.id_fan : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bbc_fan = null;
      } else {
        this.bbc_fan = in.readString(this.bbc_fan instanceof Utf8 ? (Utf8)this.bbc_fan : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bbc_control_fan = null;
      } else {
        this.bbc_control_fan = in.readString(this.bbc_control_fan instanceof Utf8 ? (Utf8)this.bbc_control_fan : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bbc_name = null;
      } else {
        this.bbc_name = in.readString(this.bbc_name instanceof Utf8 ? (Utf8)this.bbc_name : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bbc_password = null;
      } else {
        this.bbc_password = in.readString(this.bbc_password instanceof Utf8 ? (Utf8)this.bbc_password : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.timestamp = null;
      } else {
        this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id_fan = null;
          } else {
            this.id_fan = in.readString(this.id_fan instanceof Utf8 ? (Utf8)this.id_fan : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bbc_fan = null;
          } else {
            this.bbc_fan = in.readString(this.bbc_fan instanceof Utf8 ? (Utf8)this.bbc_fan : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bbc_control_fan = null;
          } else {
            this.bbc_control_fan = in.readString(this.bbc_control_fan instanceof Utf8 ? (Utf8)this.bbc_control_fan : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bbc_name = null;
          } else {
            this.bbc_name = in.readString(this.bbc_name instanceof Utf8 ? (Utf8)this.bbc_name : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bbc_password = null;
          } else {
            this.bbc_password = in.readString(this.bbc_password instanceof Utf8 ? (Utf8)this.bbc_password : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.timestamp = null;
          } else {
            this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










