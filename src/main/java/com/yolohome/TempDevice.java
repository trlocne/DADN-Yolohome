/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.yolohome;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema for temperature */
@org.apache.avro.specific.AvroGenerated
public class TempDevice extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7480873267485150495L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TempDevice\",\"namespace\":\"com.yolohome\",\"doc\":\"Schema for temperature\",\"fields\":[{\"name\":\"id_temp\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"bbc_temp\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"bbc_name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"bbc_password\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"timestamp\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TempDevice> ENCODER =
      new BinaryMessageEncoder<TempDevice>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TempDevice> DECODER =
      new BinaryMessageDecoder<TempDevice>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TempDevice> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TempDevice> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TempDevice> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TempDevice>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TempDevice to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TempDevice from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TempDevice instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TempDevice fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id_temp;
  private java.lang.Float bbc_temp;
  private java.lang.CharSequence bbc_name;
  private java.lang.CharSequence bbc_password;
  private java.lang.CharSequence timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TempDevice() {}

  /**
   * All-args constructor.
   * @param id_temp The new value for id_temp
   * @param bbc_temp The new value for bbc_temp
   * @param bbc_name The new value for bbc_name
   * @param bbc_password The new value for bbc_password
   * @param timestamp The new value for timestamp
   */
  public TempDevice(java.lang.CharSequence id_temp, java.lang.Float bbc_temp, java.lang.CharSequence bbc_name, java.lang.CharSequence bbc_password, java.lang.CharSequence timestamp) {
    this.id_temp = id_temp;
    this.bbc_temp = bbc_temp;
    this.bbc_name = bbc_name;
    this.bbc_password = bbc_password;
    this.timestamp = timestamp;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id_temp;
    case 1: return bbc_temp;
    case 2: return bbc_name;
    case 3: return bbc_password;
    case 4: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id_temp = (java.lang.CharSequence)value$; break;
    case 1: bbc_temp = (java.lang.Float)value$; break;
    case 2: bbc_name = (java.lang.CharSequence)value$; break;
    case 3: bbc_password = (java.lang.CharSequence)value$; break;
    case 4: timestamp = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id_temp' field.
   * @return The value of the 'id_temp' field.
   */
  public java.lang.CharSequence getIdTemp() {
    return id_temp;
  }


  /**
   * Sets the value of the 'id_temp' field.
   * @param value the value to set.
   */
  public void setIdTemp(java.lang.CharSequence value) {
    this.id_temp = value;
  }

  /**
   * Gets the value of the 'bbc_temp' field.
   * @return The value of the 'bbc_temp' field.
   */
  public java.lang.Float getBbcTemp() {
    return bbc_temp;
  }


  /**
   * Sets the value of the 'bbc_temp' field.
   * @param value the value to set.
   */
  public void setBbcTemp(java.lang.Float value) {
    this.bbc_temp = value;
  }

  /**
   * Gets the value of the 'bbc_name' field.
   * @return The value of the 'bbc_name' field.
   */
  public java.lang.CharSequence getBbcName() {
    return bbc_name;
  }


  /**
   * Sets the value of the 'bbc_name' field.
   * @param value the value to set.
   */
  public void setBbcName(java.lang.CharSequence value) {
    this.bbc_name = value;
  }

  /**
   * Gets the value of the 'bbc_password' field.
   * @return The value of the 'bbc_password' field.
   */
  public java.lang.CharSequence getBbcPassword() {
    return bbc_password;
  }


  /**
   * Sets the value of the 'bbc_password' field.
   * @param value the value to set.
   */
  public void setBbcPassword(java.lang.CharSequence value) {
    this.bbc_password = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Creates a new TempDevice RecordBuilder.
   * @return A new TempDevice RecordBuilder
   */
  public static com.yolohome.TempDevice.Builder newBuilder() {
    return new com.yolohome.TempDevice.Builder();
  }

  /**
   * Creates a new TempDevice RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TempDevice RecordBuilder
   */
  public static com.yolohome.TempDevice.Builder newBuilder(com.yolohome.TempDevice.Builder other) {
    if (other == null) {
      return new com.yolohome.TempDevice.Builder();
    } else {
      return new com.yolohome.TempDevice.Builder(other);
    }
  }

  /**
   * Creates a new TempDevice RecordBuilder by copying an existing TempDevice instance.
   * @param other The existing instance to copy.
   * @return A new TempDevice RecordBuilder
   */
  public static com.yolohome.TempDevice.Builder newBuilder(com.yolohome.TempDevice other) {
    if (other == null) {
      return new com.yolohome.TempDevice.Builder();
    } else {
      return new com.yolohome.TempDevice.Builder(other);
    }
  }

  /**
   * RecordBuilder for TempDevice instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TempDevice>
    implements org.apache.avro.data.RecordBuilder<TempDevice> {

    private java.lang.CharSequence id_temp;
    private java.lang.Float bbc_temp;
    private java.lang.CharSequence bbc_name;
    private java.lang.CharSequence bbc_password;
    private java.lang.CharSequence timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.yolohome.TempDevice.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id_temp)) {
        this.id_temp = data().deepCopy(fields()[0].schema(), other.id_temp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.bbc_temp)) {
        this.bbc_temp = data().deepCopy(fields()[1].schema(), other.bbc_temp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.bbc_name)) {
        this.bbc_name = data().deepCopy(fields()[2].schema(), other.bbc_name);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.bbc_password)) {
        this.bbc_password = data().deepCopy(fields()[3].schema(), other.bbc_password);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing TempDevice instance
     * @param other The existing instance to copy.
     */
    private Builder(com.yolohome.TempDevice other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id_temp)) {
        this.id_temp = data().deepCopy(fields()[0].schema(), other.id_temp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bbc_temp)) {
        this.bbc_temp = data().deepCopy(fields()[1].schema(), other.bbc_temp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bbc_name)) {
        this.bbc_name = data().deepCopy(fields()[2].schema(), other.bbc_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.bbc_password)) {
        this.bbc_password = data().deepCopy(fields()[3].schema(), other.bbc_password);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id_temp' field.
      * @return The value.
      */
    public java.lang.CharSequence getIdTemp() {
      return id_temp;
    }


    /**
      * Sets the value of the 'id_temp' field.
      * @param value The value of 'id_temp'.
      * @return This builder.
      */
    public com.yolohome.TempDevice.Builder setIdTemp(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id_temp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id_temp' field has been set.
      * @return True if the 'id_temp' field has been set, false otherwise.
      */
    public boolean hasIdTemp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id_temp' field.
      * @return This builder.
      */
    public com.yolohome.TempDevice.Builder clearIdTemp() {
      id_temp = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bbc_temp' field.
      * @return The value.
      */
    public java.lang.Float getBbcTemp() {
      return bbc_temp;
    }


    /**
      * Sets the value of the 'bbc_temp' field.
      * @param value The value of 'bbc_temp'.
      * @return This builder.
      */
    public com.yolohome.TempDevice.Builder setBbcTemp(java.lang.Float value) {
      validate(fields()[1], value);
      this.bbc_temp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bbc_temp' field has been set.
      * @return True if the 'bbc_temp' field has been set, false otherwise.
      */
    public boolean hasBbcTemp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bbc_temp' field.
      * @return This builder.
      */
    public com.yolohome.TempDevice.Builder clearBbcTemp() {
      bbc_temp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bbc_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getBbcName() {
      return bbc_name;
    }


    /**
      * Sets the value of the 'bbc_name' field.
      * @param value The value of 'bbc_name'.
      * @return This builder.
      */
    public com.yolohome.TempDevice.Builder setBbcName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.bbc_name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bbc_name' field has been set.
      * @return True if the 'bbc_name' field has been set, false otherwise.
      */
    public boolean hasBbcName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bbc_name' field.
      * @return This builder.
      */
    public com.yolohome.TempDevice.Builder clearBbcName() {
      bbc_name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'bbc_password' field.
      * @return The value.
      */
    public java.lang.CharSequence getBbcPassword() {
      return bbc_password;
    }


    /**
      * Sets the value of the 'bbc_password' field.
      * @param value The value of 'bbc_password'.
      * @return This builder.
      */
    public com.yolohome.TempDevice.Builder setBbcPassword(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.bbc_password = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'bbc_password' field has been set.
      * @return True if the 'bbc_password' field has been set, false otherwise.
      */
    public boolean hasBbcPassword() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'bbc_password' field.
      * @return This builder.
      */
    public com.yolohome.TempDevice.Builder clearBbcPassword() {
      bbc_password = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.yolohome.TempDevice.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.yolohome.TempDevice.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TempDevice build() {
      try {
        TempDevice record = new TempDevice();
        record.id_temp = fieldSetFlags()[0] ? this.id_temp : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.bbc_temp = fieldSetFlags()[1] ? this.bbc_temp : (java.lang.Float) defaultValue(fields()[1]);
        record.bbc_name = fieldSetFlags()[2] ? this.bbc_name : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.bbc_password = fieldSetFlags()[3] ? this.bbc_password : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TempDevice>
    WRITER$ = (org.apache.avro.io.DatumWriter<TempDevice>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TempDevice>
    READER$ = (org.apache.avro.io.DatumReader<TempDevice>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id_temp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id_temp);
    }

    if (this.bbc_temp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeFloat(this.bbc_temp);
    }

    if (this.bbc_name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.bbc_name);
    }

    if (this.bbc_password == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.bbc_password);
    }

    if (this.timestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.timestamp);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id_temp = null;
      } else {
        this.id_temp = in.readString(this.id_temp instanceof Utf8 ? (Utf8)this.id_temp : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bbc_temp = null;
      } else {
        this.bbc_temp = in.readFloat();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bbc_name = null;
      } else {
        this.bbc_name = in.readString(this.bbc_name instanceof Utf8 ? (Utf8)this.bbc_name : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bbc_password = null;
      } else {
        this.bbc_password = in.readString(this.bbc_password instanceof Utf8 ? (Utf8)this.bbc_password : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.timestamp = null;
      } else {
        this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id_temp = null;
          } else {
            this.id_temp = in.readString(this.id_temp instanceof Utf8 ? (Utf8)this.id_temp : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bbc_temp = null;
          } else {
            this.bbc_temp = in.readFloat();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bbc_name = null;
          } else {
            this.bbc_name = in.readString(this.bbc_name instanceof Utf8 ? (Utf8)this.bbc_name : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bbc_password = null;
          } else {
            this.bbc_password = in.readString(this.bbc_password instanceof Utf8 ? (Utf8)this.bbc_password : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.timestamp = null;
          } else {
            this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










